---
title: "Wine Ratings 2"
author: "Alex Stephenson"
date: "26/07/2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(tidyverse)
theme_set(theme_light())
wine_ratings <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-28/winemag-data-130k-v2.csv") %>%
  select(-X1) %>%
  extract(title, "year", "(20\\d\\d)", convert = TRUE, remove = FALSE) %>%
  mutate(year = ifelse(year < 1900, NA, year)) %>%
  filter(!is.na(price))
```

```{r}
wine_ratings %>%
  count(country, sort = T)
wine_ratings %>%
  count(designation, sort = T)
wine_ratings %>%
  count(country, region_1, sort = TRUE)
wine_ratings %>%
  count(taster_name, sort = TRUE)
wine_ratings %>%
  filter(!is.na(designation)) %>%
  count(variety, designation, sort = TRUE)
wine_ratings %>%
  ggplot(aes(year)) +
  geom_histogram()
wine_ratings %>%
  ggplot(aes(points)) +
  geom_histogram(binwidth = 1)
wine_ratings %>%
  ggplot(aes(price)) +
  geom_histogram() +
  scale_x_log10()
```

```{r}
ggplot(wine_ratings, aes(price, points)) +
  geom_point(alpha = .1) +
  geom_smooth(method = "lm") +
  scale_x_log10()
summary(lm(points ~ log2(price), wine_ratings))
```

Every time the price doubles, the expected number of points goes up by 2.

```{r}
library(broom)
model <- wine_ratings %>%
  replace_na(list(taster_name = "Missing", country = "Missing")) %>%
  mutate(country = fct_relevel(fct_lump(country, 7), "US"),
         taster_name = fct_relevel(fct_lump(taster_name, 6), "Missing")) %>%
  lm(points ~ log2(price) + country + year + taster_name, data = .)
model %>%
  tidy(conf.int = TRUE) %>%
  filter(term != "(Intercept)") %>%
  mutate(term = str_replace(term, "country", "Country: "),
         term = str_replace(term, "taster_name", "Taster: "),
         term = fct_reorder(term, estimate)) %>%
  ggplot(aes(estimate, term)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
```

```{r}
model %>%
  augment(data = wine_ratings) %>%
  ggplot(aes(.fitted, points)) +
  geom_point(alpha = .1)
tidy(anova(model)) %>%
  mutate(sumsq / sum(sumsq))
```

### Lasso regression on words in description

```{r}
library(tidytext)
wine_rating_words <- wine_ratings %>%
  mutate(wine_id = row_number()) %>%
  unnest_tokens(word, description) %>%
  anti_join(stop_words, by = "word") %>%
  filter(!word %in% c("wine", "drink"),
         str_detect(word, "[a-z]"))
wine_rating_words %>%
  count(word, sort = TRUE) %>%
  head(20) %>%
  mutate(word = fct_reorder(word, n)) %>%
  ggplot(aes(word, n)) +
  geom_col() +
  coord_flip()
```

```{r}
library(widyr)
wine_words_filtered <- wine_rating_words %>%
  distinct(wine_id, word) %>%
  add_count(word) %>%
  filter(n >= 100)
wine_words_filtered %>%
  pairwise_cor(word, wine_id, sort = TRUE)
```

```{r}
library(Matrix)
wine_word_matrix <- wine_words_filtered %>%
  cast_sparse(wine_id, word)
wine_ids <- as.integer(rownames(wine_word_matrix))
scores <- wine_ratings$points[wine_ids]
library(glmnet)
wine_word_matrix_extra <- cbind(wine_word_matrix, log_price = log2(wine_ratings$price[wine_ids]))
library(doMC)
registerDoMC(cores = 4)
cv_glmnet_model_wine <- cv.glmnet(wine_word_matrix_extra, scores, parallel = TRUE)
plot(cv_glmnet_model_wine)
```

```{r}
wine_lexicon <- cv_glmnet_model_wine$glmnet.fit %>% 
  tidy() %>% 
  filter(lambda == cv_glmnet_model_wine$lambda.1se,
         term != "(Intercept)",
         term != "log_price")


wine_lexicon %>% 
  arrange(estimate) %>% 
  group_by(direction = ifelse(estimate < 0, "Negative", "Positive")) %>% 
  top_n(10, abs(estimate)) %>% 
  ungroup() %>% 
  mutate(term = fct_reorder(term, estimate)) %>% 
  ggplot(aes(term, estimate, fill = direction)) +
  geom_col() +
  coord_flip() +
  labs(y = "Estimated effect of word on the score")

|```
e.g. Every use of tremendous raises word by 1.3

```{r}
wine_rating_words %>% 
  filter(wine_id == 1) %>% 
  select(word, points) %>% 
  inner_join(lexicon, by = "words")
```




```{r}
shaming %>% 
  select(treatment, primary_04, primary_06) %>% 
  mutate(primary_04 = if_else(str_detect(primary_04, "Yes"),true = 1, false = 0 )) %>% 
  # if there is a 'Yes' in 'primary_04', make primary_04 1, else make primary_04 0.
  pivot_longer(cols = c(primary_04, primary_06), names_to = 'year', values_to = 'voted') %>% 
  group_by(treatment, year, voted) %>% 
  summarise(num_voters = n()) %>% 
  mutate(voted = if_else(condition = voted == 1, 'did_vote', 'did_not_vote'))
  # if voted = 1 IS TRY
  
```





```{r}
data("qscores")
data("results_house")


q_subset_2 <- qscores %>% 
  filter(department %in% c("ECON", 'MATH', 'GOV')) %>% 
  arrange(department)

q_subset <- qscores %>%
  select(department, hours) %>%
  group_by(department) %>%
  summarize(num_classes = n(), mean_hours = mean(hours), sd_hours = sd(hours)) %>%
  arrange(desc(num_classes)) %>%
  slice(1:3) %>%
  group_by(department) %>% 
  summarise(rnorm_values = rnorm(n = first(num_classes), mean = mean_hours, sd = sd_hours)) %>% 
  select(department, rnorm_values) %>% 
  arrange(department)


qscores %>%
  select(department, hours)  %>% 
  group_by(department) %>% 
  summarize(num_classes = n(), mean_hours = mean(hours), sd_hours = sd(hours)), 
            rnorm_values = rnorm(n = num_classes), mean = mean(hours), sd = sd(hours)))




left_join(q_subset, q_subset_2, by = 'department') %>% 
  pivot_longer(cols = c(rnorm_values, hours), names_to = "type", 
               values_to = "value") %>% ggplot(., aes(x = value)) +
  geom_histogram(binwidth = 2) +
  facet_wrap(~ department) +
  labs(title = 'Homework patterns of a harvard classes by Dept', subtitle = 'can I put Harvard on my cv?', caption = "R is lots of fun :) :) :)") +
  theme_economist() 

```


```{r}
q_subset <- qscores %>%
select(department, hours) %>%
group_by(department) %>%
summarize(num_classes = n(), mean_hours = mean(hours), sd_hours = sd(hours)) %>%
arrange(desc(num_classes)) %>%
slice(1:3) %>%
group_by(department) %>%
dplyr::summarize(rnorm_values = rnorm(n = 3, mean = mean_hours, sd = sd_hours)) %>%
arrange(department)

?rnorm

class(q_subset$num_classes[[3]])
```


```{r}
library(fec16)
library(tidyverse)

results_house %>% 
  select(state, district_id, general_votes) %>% 
  filter(!is.na(general_votes)) %>% 
  group_by(state, district_id) %>% 
  summarise(total_votes = sum(general_votes),
            mean_voters = mean(total_votes)) %>% 
  arrange(desc(mean_voters))
```


Question 2


```{r}
presidential_total <- results_president %>% 
  filter(!is.na(general_votes)) %>% 
  group_by(state) %>% 
  summarise(presidential_votes = sum(general_votes))


results_senate %>% 
  filter(!is.na(general_votes)) %>% 
    group_by(state) %>% 
  summarise(senate_votes = sum(general_votes)) %>% 
  left_join(presidential_total, by = "state") %>% 
  mutate(vote_diff = presidential_votes - senate_votes)




president
```


```{r}

options(scipen = 999)
alex <- results_house %>% 
  filter(party %in% c('REP', 'DEM')) %>% 
  drop_na(primary_votes, general_votes) %>% 
  ggplot(., aes(primary_votes, general_votes, colour = party)) +
  geom_point() +
  scale_colour_manual(values = c("dodgerblue", "lightcoral")) +
  theme_light() +
  scale_y_continuous(breaks = c(0, 100000, 200000, 300000),
                     labels = scales::comma_format()) +
  scale_x_continuous(breaks = c(0, 100000, 200000),
                     labels = scales::comma_format())



sum(is.na(alex) == sum(is.na(uri))

```


```{r}
uri <- results_house %>% 
  filter(party %in% c("DEM", "REP")) %>% 
  drop_na(primary_votes, general_votes) %>% 
  ggplot(., aes(x = primary_votes,
                       y = general_votes, colour = party)) +
  geom_point() +
  labs(title = "Votes for House Candidates in 2016",
       subtitle = "Almost all candidates receive more votes in general election",
       x = "Number of Votes in General Election",
       y = "Number of Votes in Primary Election",
       caption = "Source: Federal Election Commission") +
    theme_light() +
  scale_y_continuous(breaks = c(0, 100000, 200000, 300000),
                                labels = scales::comma_format()) +
  scale_x_continuous(breaks = c(0, 100000, 200000),
                     labels = scales::comma_format()) +
  scale_color_manual(values= c("dodgerblue", "lightcoral"))
```




```{r}
library(fivethirtyeight)
```







```{r}
states <- states %>% 
  rename(state_abbr = state)


partisan_lean <- partisan_lean_state %>% 
  rename(state_name = state) %>% 
  inner_join(states, by = "state_name") %>% 
  select(state_name, pvi_party, pvi_amount) %>% 
  mutate(partisan_lean_demrep = ifelse(pvi_party == "R", -pvi_amount, pvi_amount))

presidential_difference <- results_president %>% 
  filter(party %in% c("DEM", "REP")) %>% 
    distinct(state, party, .keep_all = T) %>% 
  pivot_wider(id_cols = state, names_from = party, values_from = general_percent) %>%
  select(state, REP, DEM) %>%
  group_by(state) %>%
  summarize(difference_1 = DEM - REP) %>% 
  group_by(state) %>% 
  summarize(president = sum(difference_1)) %>% 
  na.omit(president)


```


```{r}
results_president %>% 
  filter(party %in% c('REP', 'DEM')) %>% 
  distinct(state, party, .keep_all = T) %>% 
  #distinct(state) %>% 
  pivot_wider(id_cols = state, names_from = party, values_from = general_votes) %>% 
  group_by(state) %>% 
  summarise(rep = mean(REP, na.rm = T),
            dem = mean(DEM, na.rm = T)) %>% 
  mutate(difference = rep - dem) %>% 
  left_join(votes_per_state, by = "state") %>% 
  mutate(difference_pcnt = total_votes / difference)


```




